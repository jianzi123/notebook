#!/usr/bin/env python3#-*- coding:utf-8 -*-import jsonimport copyimport csvimport codecs#from ...base.handlers import IPythonHandlerclass Item():    def __init__(self, example, detail, type):        self.example = example        self.detail = detail        self.type = type    def __repr__(self):        return repr((self.example, self.detail, self.type))class Table():    def __init__(self, name):        self.name = name        self.para_detail = []        self.para = []    def append(self, item, name):        self.para_detail.append(copy.deepcopy(item))        self.para.append(copy.deepcopy(name))    def clear(self):        self.para_detail.clear()        self.para.clear()        self.name = ''    def __repr__(self):        return repr((self.para, self.para_detail))class Data():    def __init__(self, title):        self.title = title        self.table = []        self.table_detail = []    def append(self, table, name):        self.table.append(copy.deepcopy(name))        self.table_detail.append(copy.deepcopy(table))    def clear(self):        self.table.clear()        self.table_detail.clear()        self.title = ''    def __repr__(self):        return repr(self.title, self.table, self.table_detail)class DataEncoder(json.JSONEncoder):    def default(self, o):        if isinstance(o, Item):            return {'example':o.example, 'explain':o.detail, 'type':o.type}        elif isinstance(o, Table):            return {'para':o.para, 'para_detail': o.para_detail}        elif isinstance(o, Data):            return {'title': o.title, 'table':o.table, 'table_detail':o.table_detail}        else:            return json.JSONEncoder.default(self, o)def readCsv(Path, fPath):    try:        csvfile = codecs.open(Path, 'r', 'utf-8')    except IOError:        print('open file failed.')        return ''    else:        spamreader = csv.reader(csvfile, delimiter=' ', quotechar="\n")        title = ''        tableName = ''        dd = None        table = None        res = []        num = 0        index = None        new = 0        for row in spamreader:            list1 = ''.join(row).split(',')            tmp = list1[0].strip().strip('\n').strip('\r').strip('\t').strip('\ufeff')            if len(list1) == 3 and tmp == ('group'):                if dd == None:                    dd = Data(list1[1])                else:                    dd.append(table, tableName)                    res.append(copy.deepcopy(dd))                    dd.clear()                    table.clear()                    dd = Data(list1[1])                title = list1[1]                new = 0            elif len(list1) == 3 and '.txt' in tmp:                # print(list1[0], list1[1])                num = 0                index = None                try:                    all = open(fPath + tmp)                    all_in = all.read()                except IOError:                    print('file not exist: ', fPath + tmp)                else:                    all_tmp = all_in.split('\n')                    # print(all_in)                    for element in all_tmp:                        if len(element.strip('\n').strip('\r').strip('\t')) == 0:                            break                        ll = element.split('|')                        for i in range(len(ll)):                            if index == None:                                index = {}                                index[i] = [ll[i]]                            elif i not in index:                                index[i] = [ll[i]]                            else:                                index[i].append(ll[i])                if dd == None:                    break                elif new == 0:                    tableName = list1[1]                    table = Table(tableName)                    new = 1                elif table != None:                    dd.append(table, tableName)                    table.clear()                    tableName = list1[1]                    table = Table(tableName)            elif len(list1) == 3 :                if dd == None:                    break                elif table == None:                    break                else:                    tt = ''                    if index == None:                        tt = ''                    else:                        #print(num, len(index))                        if num >= len(index):                            continue                        else:                            tt = ','.join(list(set(index[num])))                    table.append(Item(tt, list1[1], list1[2]), list1[0])                    num = num + 1        if dd != None and table != None:            dd.append(table, tableName)        if dd != None:            res.append(dd)        # print(json.dumps(res, cls=DataEncoder, indent=4))        return json.dumps(res, cls=DataEncoder, indent=4)